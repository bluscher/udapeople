version: 2.1
orbs: 
  slack: circleci/slack@4.8.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy Frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - ~/project/frontend/node_modules

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build
          paths:
            - ~/project/backend/node_modules

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          key: frontend-build

      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm run test

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          key: backend-build

      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Audting Phase Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Auditing Phase Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              #--tags project=udapeople  \
              # --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_API_URL=$(aws ec2 describe-instances \
              --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)  
            echo ${BACKEND_API_URL}
            curl -H "Content-Type: text/plain" -H "token: 4148b519-c531-4bf7-9974-f4d73b474107" \
              --request PUT --data "$BACKEND_API_URL" https://api.memstash.io/values/backend_api
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
       - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
           branches:
              only: [master]
      #- configure-infrastructure:
     #     requires: [deploy-infrastructure]
     # - run-migrations:
       #   requires: [configure-infrastructure]
     # - deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
       #   requires: [run-migrations]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]
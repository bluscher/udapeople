version: 2.1
orbs: 
  slack: circleci/slack@4.8.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy Backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy Frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            export SUCCESS=$(curl -k https://kvdb.io/AiLVPwtUCZNCY13CiAh9LB/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |            
            sudo apt -y install jq tar gzip git curl
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - ~/project/frontend/node_modules

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build
          paths:
            - ~/project/backend/node_modules

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          key: frontend-build

      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm run test

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            sudo apt -y install jq tar gzip git curl
      - restore_cache:
          key: backend-build

      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test

      - slack/notify:
          channel: C034WK42C20
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Audting Phase Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Auditing Phase Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
         #     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7} KeyName=udapeople"  

      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople  \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
         #     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7} KeyName=udapeople"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)  

            echo "${BACKEND_IP}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

            curl https://kvdb.io/AiLVPwtUCZNCY13CiAh9LB/backend_ip \
             -d ${BACKEND_IP}
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "60:80:c2:0b:76:8a:cb:a5:21:cf:d7:d6:a5:cb:e2:65"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --no-cache --update ansible
            apk add --no-cache --upgrade bash
            pip3 install awscli
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: set .env file with the required data
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env" 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations | tee migrations_code.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
           cd backend
            if grep "has been executed successfully" migrations_code.txt
            then
              curl -k https://kvdb.io/AiLVPwtUCZNCY13CiAh9LB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
              curl -k https://kvdb.io/AiLVPwtUCZNCY13CiAh9LB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi   
      - revert-migrations
      - destroy-environment
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    #   - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum install -y curl tar sudo
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
            node --version   
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo $API_URL
      - run:
          name: Build frontend
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
      - revert-migrations
      - destroy-environment 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "60:80:c2:0b:76:8a:cb:a5:21:cf:d7:d6:a5:cb:e2:65"
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
       - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
           branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      #- deploy-backend:
       #   requires: [run-migrations]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]